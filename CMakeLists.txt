cmake_minimum_required(VERSION 2.6)

SET(PROJECTNAME rsb)
PROJECT(${PROJECTNAME})

# --- cmake settings ---

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)

SET(PROJECT_CMAKE_PATH ${CMAKE_INSTALL_PREFIX}/share/cmake/Modules)
SET(CMAKE_MODULE_PATH ${PROJECT_CMAKE_PATH} ${CMAKE_MODULE_PATH})

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING
        "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
        FORCE)
ENDIF()

INCLUDE(FindPkgConfig)
INCLUDE(CheckCXXCompilerFlag)
INCLUDE(InstallFilesRecursive)
INCLUDE(EnableCoverageReport)

SET(RSB_VERSION 0.1.0)
SET(RSB_NAME "RSBCore")
SET(RSB_TEST_NAME "rsbtest")
SET(CORE_TEST_NAME rsbtest_core)
SET(SPREADPORT_TEST_NAME rsbtest_spread)

# --- global compiler flags ---

CHECK_CXX_COMPILER_FLAG(-pipe CHECK_CXX_FLAG_pipe)
IF(CHECK_CXX_FLAG_pipe)
    ADD_DEFINITIONS(-pipe)
ENDIF()
CHECK_CXX_COMPILER_FLAG(-Wall CHECK_CXX_FLAG_Wall)
IF(CHECK_CXX_FLAG_Wall)
    ADD_DEFINITIONS(-Wall)
ENDIF()
CHECK_CXX_COMPILER_FLAG(-Wextra CHECK_CXX_FLAG_Wextra)
IF(CHECK_CXX_FLAG_Wextra)
    ADD_DEFINITIONS(-Wextra)
ENDIF()
CHECK_CXX_COMPILER_FLAG(-fdiagnostics-show-option CHECK_CXX_FLAG_DIAGNOSTICS)
IF(CHECK_CXX_FLAG_DIAGNOSTICS)
    ADD_DEFINITIONS(-fdiagnostics-show-option)
ENDIF()

IF(WIN32)
    ADD_DEFINITIONS(-D_USE_MATH_DEFINES)
ENDIF()

# --- user options ---

OPTION(BUILD_TESTS "Decide if the test suite shall be built or not" ON)

# --- project settings ---

SET(GTEST_DIR ${CMAKE_SOURCE_DIR}/3rdparty/gtest-1.5.0)
SET(GTEST_INCLUDE_DIR ${GTEST_DIR}/include)
SET(GMOCK_DIR ${CMAKE_SOURCE_DIR}/3rdparty/gmock-1.5.0)
SET(GMOCK_INCLUDE_DIR ${GMOCK_DIR}/include)
SET(GMOCK_LIBRARY_NAME "gmock")

# --- dependency handling ---

SET(Boost_USE_MULTITHREADED ON)
FIND_PACKAGE(Boost 1.34.1 COMPONENTS thread REQUIRED)
FIND_PACKAGE(BoostUUID REQUIRED)

FIND_PACKAGE(Threads REQUIRED)
MESSAGE(STATUS "Threading library: ${CMAKE_THREAD_LIBS_INIT}")

FIND_PACKAGE(ProtocolBuffers REQUIRED)
IF(NOT PROTOBUF_PROTOC_EXECUTABLE)
    MESSAGE(FATAL_ERROR "protoc executable not found")
ENDIF()

PKG_CHECK_MODULES(RSC REQUIRED rsc)
FIND_PACKAGE(RSBProtocol REQUIRED)

SET(SPREAD_USE_STATIC TRUE)
FIND_PACKAGE(Spread REQUIRED)

INCLUDE_DIRECTORIES(SYSTEM ${LIBS_INCLUDE_DIRS}
                           ${RSC_INCLUDE_DIRS}
                           ${Boost_INCLUDE_DIRS}
                           ${BOOSTTHREADPOOL_INCLUDE_DIRS}
                           ${BOOSTUUID_INCLUDE_DIRS}
                           ${PROTOBUF_INCLUDE_DIRS}
                           ${SPREAD_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(BEFORE src)
LINK_DIRECTORIES(${RSC_LIBRARY_DIRS} ${LIBS_LIBRARY_DIRS})

FIND_PACKAGE(Doxygen)

# --- source code ---

ADD_SUBDIRECTORY(3rdparty)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(examples)
ADD_SUBDIRECTORY(apps)

ENABLE_TESTING()
IF(BUILD_TESTS)
    ADD_SUBDIRECTORY(test)
ENDIF()

# --- install ---

CONFIGURE_FILE(rsb.pc.in rsb.pc @ONLY)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/rsb.pc DESTINATION lib/pkgconfig)

# --- documentation gneration ---

IF(DOXYGEN_FOUND)

    SET(API_DIR ${CMAKE_BINARY_DIR}/doc)
    SET(SOURCE_DIR ${CMAKE_SOURCE_DIR}/src)
    SET(DOXYFILE ${CMAKE_BINARY_DIR}/Doxyfile)
    SET(WARNFILE ${CMAKE_BINARY_DIR}/doxygen-warn.log)
    
    CONFIGURE_FILE(Doxyfile.in ${DOXYFILE})
    
    ADD_CUSTOM_COMMAND(OUTPUT ${API_DIR}
                       DEPENDS ${DOXYFILE}
                       COMMAND ${DOXYGEN_EXECUTABLE}
                       ARGS ${DOXYFILE}
                       WORKING_DIRECTORY ${CMAKE_BINARY_DIR})
    ADD_CUSTOM_TARGET(doc DEPENDS ${API_DIR})
    
    INSTALL(CODE "execute_process(COMMAND ${CMAKE_BUILD_TOOL} doc)")
    INSTALL(DIRECTORY ${API_DIR} DESTINATION share/RSB)

ENDIF()

# --- coverage ropert ---

ENABLE_COVERAGE_REPORT(TARGETS ${RSB_NAME} TESTS ${RSB_TEST_NAME} ${CORE_TEST_NAME} ${SPREADPORT_TEST_NAME} FILTER "*coverage/*" "*/test*")
