// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Attachment.proto

#ifndef PROTOBUF_Attachment_2eproto__INCLUDED
#define PROTOBUF_Attachment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rsb {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Attachment_2eproto();
void protobuf_AssignDesc_Attachment_2eproto();
void protobuf_ShutdownFile_Attachment_2eproto();

class Attachment;

// ===================================================================

class Attachment : public ::google::protobuf::Message {
 public:
  Attachment();
  virtual ~Attachment();
  
  Attachment(const Attachment& from);
  
  inline Attachment& operator=(const Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attachment& default_instance();
  
  void Swap(Attachment* other);
  
  // implements Message ----------------------------------------------
  
  Attachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attachment& from);
  void MergeFrom(const Attachment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string type_id = 1 [default = "application/octet-stream"];
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline const ::std::string& type_id() const;
  inline void set_type_id(const ::std::string& value);
  inline void set_type_id(const char* value);
  inline void set_type_id(const char* value, size_t size);
  inline ::std::string* mutable_type_id();
  
  // required int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);
  
  // optional bytes binary = 3;
  inline bool has_binary() const;
  inline void clear_binary();
  static const int kBinaryFieldNumber = 3;
  inline const ::std::string& binary() const;
  inline void set_binary(const ::std::string& value);
  inline void set_binary(const char* value);
  inline void set_binary(const void* value, size_t size);
  inline ::std::string* mutable_binary();
  
  // @@protoc_insertion_point(class_scope:rsb.protocol.Attachment)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* type_id_;
  static const ::std::string _default_type_id_;
  ::google::protobuf::int32 length_;
  ::std::string* binary_;
  static const ::std::string _default_binary_;
  friend void  protobuf_AddDesc_Attachment_2eproto();
  friend void protobuf_AssignDesc_Attachment_2eproto();
  friend void protobuf_ShutdownFile_Attachment_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Attachment* default_instance_;
};
// ===================================================================


// ===================================================================

// Attachment

// optional string type_id = 1 [default = "application/octet-stream"];
inline bool Attachment::has_type_id() const {
  return _has_bit(0);
}
inline void Attachment::clear_type_id() {
  if (type_id_ != &_default_type_id_) {
    type_id_->assign(_default_type_id_);
  }
  _clear_bit(0);
}
inline const ::std::string& Attachment::type_id() const {
  return *type_id_;
}
inline void Attachment::set_type_id(const ::std::string& value) {
  _set_bit(0);
  if (type_id_ == &_default_type_id_) {
    type_id_ = new ::std::string;
  }
  type_id_->assign(value);
}
inline void Attachment::set_type_id(const char* value) {
  _set_bit(0);
  if (type_id_ == &_default_type_id_) {
    type_id_ = new ::std::string;
  }
  type_id_->assign(value);
}
inline void Attachment::set_type_id(const char* value, size_t size) {
  _set_bit(0);
  if (type_id_ == &_default_type_id_) {
    type_id_ = new ::std::string;
  }
  type_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attachment::mutable_type_id() {
  _set_bit(0);
  if (type_id_ == &_default_type_id_) {
    type_id_ = new ::std::string(_default_type_id_);
  }
  return type_id_;
}

// required int32 length = 2;
inline bool Attachment::has_length() const {
  return _has_bit(1);
}
inline void Attachment::clear_length() {
  length_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Attachment::length() const {
  return length_;
}
inline void Attachment::set_length(::google::protobuf::int32 value) {
  _set_bit(1);
  length_ = value;
}

// optional bytes binary = 3;
inline bool Attachment::has_binary() const {
  return _has_bit(2);
}
inline void Attachment::clear_binary() {
  if (binary_ != &_default_binary_) {
    binary_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Attachment::binary() const {
  return *binary_;
}
inline void Attachment::set_binary(const ::std::string& value) {
  _set_bit(2);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void Attachment::set_binary(const char* value) {
  _set_bit(2);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void Attachment::set_binary(const void* value, size_t size) {
  _set_bit(2);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attachment::mutable_binary() {
  _set_bit(2);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  return binary_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace rsb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Attachment_2eproto__INCLUDED
