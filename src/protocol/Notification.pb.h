// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Notification.proto

#ifndef PROTOBUF_Notification_2eproto__INCLUDED
#define PROTOBUF_Notification_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Attachment.pb.h"
// @@protoc_insertion_point(includes)

namespace rsb {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Notification_2eproto();
void protobuf_AssignDesc_Notification_2eproto();
void protobuf_ShutdownFile_Notification_2eproto();

class Notification;

// ===================================================================

class Notification : public ::google::protobuf::Message {
 public:
  Notification();
  virtual ~Notification();
  
  Notification(const Notification& from);
  
  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Notification& default_instance();
  
  void Swap(Notification* other);
  
  // implements Message ----------------------------------------------
  
  Notification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string version = 1 [default = "1.0"];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  
  // required string eid = 2;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 2;
  inline const ::std::string& eid() const;
  inline void set_eid(const ::std::string& value);
  inline void set_eid(const char* value);
  inline void set_eid(const char* value, size_t size);
  inline ::std::string* mutable_eid();
  
  // required bool standalone = 3;
  inline bool has_standalone() const;
  inline void clear_standalone();
  static const int kStandaloneFieldNumber = 3;
  inline bool standalone() const;
  inline void set_standalone(bool value);
  
  // optional int32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // optional int32 s_length = 5;
  inline bool has_s_length() const;
  inline void clear_s_length();
  static const int kSLengthFieldNumber = 5;
  inline ::google::protobuf::int32 s_length() const;
  inline void set_s_length(::google::protobuf::int32 value);
  
  // optional string uri = 6;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 6;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  
  // optional string type_id = 7;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 7;
  inline const ::std::string& type_id() const;
  inline void set_type_id(const ::std::string& value);
  inline void set_type_id(const char* value);
  inline void set_type_id(const char* value, size_t size);
  inline ::std::string* mutable_type_id();
  
  // optional string comment = 8;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 8;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  
  // optional .rsb.protocol.Attachment data = 9;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 9;
  inline const ::rsb::protocol::Attachment& data() const;
  inline ::rsb::protocol::Attachment* mutable_data();
  
  // @@protoc_insertion_point(class_scope:rsb.protocol.Notification)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* version_;
  static const ::std::string _default_version_;
  ::std::string* eid_;
  static const ::std::string _default_eid_;
  bool standalone_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 s_length_;
  ::std::string* uri_;
  static const ::std::string _default_uri_;
  ::std::string* type_id_;
  static const ::std::string _default_type_id_;
  ::std::string* comment_;
  static const ::std::string _default_comment_;
  ::rsb::protocol::Attachment* data_;
  friend void  protobuf_AddDesc_Notification_2eproto();
  friend void protobuf_AssignDesc_Notification_2eproto();
  friend void protobuf_ShutdownFile_Notification_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Notification* default_instance_;
};
// ===================================================================


// ===================================================================

// Notification

// optional string version = 1 [default = "1.0"];
inline bool Notification::has_version() const {
  return _has_bit(0);
}
inline void Notification::clear_version() {
  if (version_ != &_default_version_) {
    version_->assign(_default_version_);
  }
  _clear_bit(0);
}
inline const ::std::string& Notification::version() const {
  return *version_;
}
inline void Notification::set_version(const ::std::string& value) {
  _set_bit(0);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void Notification::set_version(const char* value) {
  _set_bit(0);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void Notification::set_version(const char* value, size_t size) {
  _set_bit(0);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_version() {
  _set_bit(0);
  if (version_ == &_default_version_) {
    version_ = new ::std::string(_default_version_);
  }
  return version_;
}

// required string eid = 2;
inline bool Notification::has_eid() const {
  return _has_bit(1);
}
inline void Notification::clear_eid() {
  if (eid_ != &_default_eid_) {
    eid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Notification::eid() const {
  return *eid_;
}
inline void Notification::set_eid(const ::std::string& value) {
  _set_bit(1);
  if (eid_ == &_default_eid_) {
    eid_ = new ::std::string;
  }
  eid_->assign(value);
}
inline void Notification::set_eid(const char* value) {
  _set_bit(1);
  if (eid_ == &_default_eid_) {
    eid_ = new ::std::string;
  }
  eid_->assign(value);
}
inline void Notification::set_eid(const char* value, size_t size) {
  _set_bit(1);
  if (eid_ == &_default_eid_) {
    eid_ = new ::std::string;
  }
  eid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_eid() {
  _set_bit(1);
  if (eid_ == &_default_eid_) {
    eid_ = new ::std::string;
  }
  return eid_;
}

// required bool standalone = 3;
inline bool Notification::has_standalone() const {
  return _has_bit(2);
}
inline void Notification::clear_standalone() {
  standalone_ = false;
  _clear_bit(2);
}
inline bool Notification::standalone() const {
  return standalone_;
}
inline void Notification::set_standalone(bool value) {
  _set_bit(2);
  standalone_ = value;
}

// optional int32 sid = 4;
inline bool Notification::has_sid() const {
  return _has_bit(3);
}
inline void Notification::clear_sid() {
  sid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Notification::sid() const {
  return sid_;
}
inline void Notification::set_sid(::google::protobuf::int32 value) {
  _set_bit(3);
  sid_ = value;
}

// optional int32 s_length = 5;
inline bool Notification::has_s_length() const {
  return _has_bit(4);
}
inline void Notification::clear_s_length() {
  s_length_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Notification::s_length() const {
  return s_length_;
}
inline void Notification::set_s_length(::google::protobuf::int32 value) {
  _set_bit(4);
  s_length_ = value;
}

// optional string uri = 6;
inline bool Notification::has_uri() const {
  return _has_bit(5);
}
inline void Notification::clear_uri() {
  if (uri_ != &_default_uri_) {
    uri_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Notification::uri() const {
  return *uri_;
}
inline void Notification::set_uri(const ::std::string& value) {
  _set_bit(5);
  if (uri_ == &_default_uri_) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void Notification::set_uri(const char* value) {
  _set_bit(5);
  if (uri_ == &_default_uri_) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void Notification::set_uri(const char* value, size_t size) {
  _set_bit(5);
  if (uri_ == &_default_uri_) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_uri() {
  _set_bit(5);
  if (uri_ == &_default_uri_) {
    uri_ = new ::std::string;
  }
  return uri_;
}

// optional string type_id = 7;
inline bool Notification::has_type_id() const {
  return _has_bit(6);
}
inline void Notification::clear_type_id() {
  if (type_id_ != &_default_type_id_) {
    type_id_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& Notification::type_id() const {
  return *type_id_;
}
inline void Notification::set_type_id(const ::std::string& value) {
  _set_bit(6);
  if (type_id_ == &_default_type_id_) {
    type_id_ = new ::std::string;
  }
  type_id_->assign(value);
}
inline void Notification::set_type_id(const char* value) {
  _set_bit(6);
  if (type_id_ == &_default_type_id_) {
    type_id_ = new ::std::string;
  }
  type_id_->assign(value);
}
inline void Notification::set_type_id(const char* value, size_t size) {
  _set_bit(6);
  if (type_id_ == &_default_type_id_) {
    type_id_ = new ::std::string;
  }
  type_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_type_id() {
  _set_bit(6);
  if (type_id_ == &_default_type_id_) {
    type_id_ = new ::std::string;
  }
  return type_id_;
}

// optional string comment = 8;
inline bool Notification::has_comment() const {
  return _has_bit(7);
}
inline void Notification::clear_comment() {
  if (comment_ != &_default_comment_) {
    comment_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& Notification::comment() const {
  return *comment_;
}
inline void Notification::set_comment(const ::std::string& value) {
  _set_bit(7);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Notification::set_comment(const char* value) {
  _set_bit(7);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Notification::set_comment(const char* value, size_t size) {
  _set_bit(7);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_comment() {
  _set_bit(7);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  return comment_;
}

// optional .rsb.protocol.Attachment data = 9;
inline bool Notification::has_data() const {
  return _has_bit(8);
}
inline void Notification::clear_data() {
  if (data_ != NULL) data_->::rsb::protocol::Attachment::Clear();
  _clear_bit(8);
}
inline const ::rsb::protocol::Attachment& Notification::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::rsb::protocol::Attachment* Notification::mutable_data() {
  _set_bit(8);
  if (data_ == NULL) data_ = new ::rsb::protocol::Attachment;
  return data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace rsb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Notification_2eproto__INCLUDED
