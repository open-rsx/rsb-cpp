// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Attachment.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rsb {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Attachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attachment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Attachment_2eproto() {
  protobuf_AddDesc_Attachment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Attachment.proto");
  GOOGLE_CHECK(file != NULL);
  Attachment_descriptor_ = file->message_type(0);
  static const int Attachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attachment, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attachment, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attachment, binary_),
  };
  Attachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attachment_descriptor_,
      Attachment::default_instance_,
      Attachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attachment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Attachment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attachment_descriptor_, &Attachment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Attachment_2eproto() {
  delete Attachment::default_instance_;
  delete Attachment_reflection_;
}

void protobuf_AddDesc_Attachment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Attachment.proto\022\014rsb.protocol\"W\n\nAtta"
    "chment\022)\n\007type_id\030\001 \001(\t:\030application/oct"
    "et-stream\022\016\n\006length\030\002 \002(\005\022\016\n\006binary\030\003 \001("
    "\014", 121);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Attachment.proto", &protobuf_RegisterTypes);
  Attachment::default_instance_ = new Attachment();
  Attachment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Attachment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Attachment_2eproto {
  StaticDescriptorInitializer_Attachment_2eproto() {
    protobuf_AddDesc_Attachment_2eproto();
  }
} static_descriptor_initializer_Attachment_2eproto_;


// ===================================================================

const ::std::string Attachment::_default_type_id_("application/octet-stream");
const ::std::string Attachment::_default_binary_;
#ifndef _MSC_VER
const int Attachment::kTypeIdFieldNumber;
const int Attachment::kLengthFieldNumber;
const int Attachment::kBinaryFieldNumber;
#endif  // !_MSC_VER

Attachment::Attachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attachment::InitAsDefaultInstance() {
}

Attachment::Attachment(const Attachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attachment::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = const_cast< ::std::string*>(&_default_type_id_);
  length_ = 0;
  binary_ = const_cast< ::std::string*>(&_default_binary_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attachment::~Attachment() {
  SharedDtor();
}

void Attachment::SharedDtor() {
  if (type_id_ != &_default_type_id_) {
    delete type_id_;
  }
  if (binary_ != &_default_binary_) {
    delete binary_;
  }
  if (this != default_instance_) {
  }
}

void Attachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attachment_descriptor_;
}

const Attachment& Attachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Attachment_2eproto();  return *default_instance_;
}

Attachment* Attachment::default_instance_ = NULL;

Attachment* Attachment::New() const {
  return new Attachment;
}

void Attachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (type_id_ != &_default_type_id_) {
        type_id_->assign(_default_type_id_);
      }
    }
    length_ = 0;
    if (_has_bit(2)) {
      if (binary_ != &_default_binary_) {
        binary_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type_id = 1 [default = "application/octet-stream"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type_id().data(), this->type_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }
      
      // required int32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_binary;
        break;
      }
      
      // optional bytes binary = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type_id = 1 [default = "application/octet-stream"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_id().data(), this->type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type_id(), output);
  }
  
  // required int32 length = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }
  
  // optional bytes binary = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->binary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type_id = 1 [default = "application/octet-stream"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_id().data(), this->type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type_id(), target);
  }
  
  // required int32 length = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }
  
  // optional bytes binary = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->binary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attachment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type_id = 1 [default = "application/octet-stream"];
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_id());
    }
    
    // required int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }
    
    // optional bytes binary = 3;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attachment::MergeFrom(const Attachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type_id(from.type_id());
    }
    if (from._has_bit(1)) {
      set_length(from.length());
    }
    if (from._has_bit(2)) {
      set_binary(from.binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attachment::CopyFrom(const Attachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void Attachment::Swap(Attachment* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(length_, other->length_);
    std::swap(binary_, other->binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attachment_descriptor_;
  metadata.reflection = Attachment_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace rsb

// @@protoc_insertion_point(global_scope)
