// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PortStateChange.proto

#ifndef PROTOBUF_PortStateChange_2eproto__INCLUDED
#define PROTOBUF_PortStateChange_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rsb {
namespace protocol {
namespace introspection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PortStateChange_2eproto();
void protobuf_AssignDesc_PortStateChange_2eproto();
void protobuf_ShutdownFile_PortStateChange_2eproto();

class PortStateChange;

// ===================================================================

class PortStateChange : public ::google::protobuf::Message {
 public:
  PortStateChange();
  virtual ~PortStateChange();
  
  PortStateChange(const PortStateChange& from);
  
  inline PortStateChange& operator=(const PortStateChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PortStateChange& default_instance();
  
  void Swap(PortStateChange* other);
  
  // implements Message ----------------------------------------------
  
  PortStateChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PortStateChange& from);
  void MergeFrom(const PortStateChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string version = 1 [default = "1.0"];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  
  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  
  // required string action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  
  // required string hostname = 4;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 4;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  
  // optional string message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // optional string comment = 6;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 6;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  
  // @@protoc_insertion_point(class_scope:rsb.protocol.introspection.PortStateChange)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* version_;
  static const ::std::string _default_version_;
  ::std::string* type_;
  static const ::std::string _default_type_;
  ::std::string* action_;
  static const ::std::string _default_action_;
  ::std::string* hostname_;
  static const ::std::string _default_hostname_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  ::std::string* comment_;
  static const ::std::string _default_comment_;
  friend void  protobuf_AddDesc_PortStateChange_2eproto();
  friend void protobuf_AssignDesc_PortStateChange_2eproto();
  friend void protobuf_ShutdownFile_PortStateChange_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PortStateChange* default_instance_;
};
// ===================================================================


// ===================================================================

// PortStateChange

// optional string version = 1 [default = "1.0"];
inline bool PortStateChange::has_version() const {
  return _has_bit(0);
}
inline void PortStateChange::clear_version() {
  if (version_ != &_default_version_) {
    version_->assign(_default_version_);
  }
  _clear_bit(0);
}
inline const ::std::string& PortStateChange::version() const {
  return *version_;
}
inline void PortStateChange::set_version(const ::std::string& value) {
  _set_bit(0);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void PortStateChange::set_version(const char* value) {
  _set_bit(0);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void PortStateChange::set_version(const char* value, size_t size) {
  _set_bit(0);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PortStateChange::mutable_version() {
  _set_bit(0);
  if (version_ == &_default_version_) {
    version_ = new ::std::string(_default_version_);
  }
  return version_;
}

// required string type = 2;
inline bool PortStateChange::has_type() const {
  return _has_bit(1);
}
inline void PortStateChange::clear_type() {
  if (type_ != &_default_type_) {
    type_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PortStateChange::type() const {
  return *type_;
}
inline void PortStateChange::set_type(const ::std::string& value) {
  _set_bit(1);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PortStateChange::set_type(const char* value) {
  _set_bit(1);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PortStateChange::set_type(const char* value, size_t size) {
  _set_bit(1);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PortStateChange::mutable_type() {
  _set_bit(1);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  return type_;
}

// required string action = 3;
inline bool PortStateChange::has_action() const {
  return _has_bit(2);
}
inline void PortStateChange::clear_action() {
  if (action_ != &_default_action_) {
    action_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& PortStateChange::action() const {
  return *action_;
}
inline void PortStateChange::set_action(const ::std::string& value) {
  _set_bit(2);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void PortStateChange::set_action(const char* value) {
  _set_bit(2);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void PortStateChange::set_action(const char* value, size_t size) {
  _set_bit(2);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PortStateChange::mutable_action() {
  _set_bit(2);
  if (action_ == &_default_action_) {
    action_ = new ::std::string;
  }
  return action_;
}

// required string hostname = 4;
inline bool PortStateChange::has_hostname() const {
  return _has_bit(3);
}
inline void PortStateChange::clear_hostname() {
  if (hostname_ != &_default_hostname_) {
    hostname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& PortStateChange::hostname() const {
  return *hostname_;
}
inline void PortStateChange::set_hostname(const ::std::string& value) {
  _set_bit(3);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void PortStateChange::set_hostname(const char* value) {
  _set_bit(3);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void PortStateChange::set_hostname(const char* value, size_t size) {
  _set_bit(3);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PortStateChange::mutable_hostname() {
  _set_bit(3);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}

// optional string message = 5;
inline bool PortStateChange::has_message() const {
  return _has_bit(4);
}
inline void PortStateChange::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& PortStateChange::message() const {
  return *message_;
}
inline void PortStateChange::set_message(const ::std::string& value) {
  _set_bit(4);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void PortStateChange::set_message(const char* value) {
  _set_bit(4);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void PortStateChange::set_message(const char* value, size_t size) {
  _set_bit(4);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PortStateChange::mutable_message() {
  _set_bit(4);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// optional string comment = 6;
inline bool PortStateChange::has_comment() const {
  return _has_bit(5);
}
inline void PortStateChange::clear_comment() {
  if (comment_ != &_default_comment_) {
    comment_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& PortStateChange::comment() const {
  return *comment_;
}
inline void PortStateChange::set_comment(const ::std::string& value) {
  _set_bit(5);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void PortStateChange::set_comment(const char* value) {
  _set_bit(5);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void PortStateChange::set_comment(const char* value, size_t size) {
  _set_bit(5);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PortStateChange::mutable_comment() {
  _set_bit(5);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  return comment_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace introspection
}  // namespace protocol
}  // namespace rsb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PortStateChange_2eproto__INCLUDED
